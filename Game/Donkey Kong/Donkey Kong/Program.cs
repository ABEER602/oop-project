using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Donkey_Kong
{
    class Program
    {
        static void Main(string[] args)
        {
            {

                //-------------GLOBAL VARIABLES---------------------//
                //--------------------------------------------------//
                int score = 0;
               
                int marioHealth = 100;
                bool gameRunning = true;
                //-------------FUNCTIONS FOR PLAYER COORDINATES------------//
                //--------------------------------------------------------//


                int drumX = 45;
                int drumY = 14;
                int marioX = 10;
                int marioY = 36;
                int fireX = 5;
                int fireY = 29;
                int firingEnemyX = 50;
                int firingEnemyY = 36;

              

                //-------------FUNCTIONS FOR PLAYER BULLET----------------//
                //--------------------------------------------------------//
                bool[] isBulletActive = new bool[1000];
                int bulletCount = 0;
                void makeBulletInactive(int index);
                int[] bulletX = new int[1000];
                int[] bulletY = new int[1000];
              

              


                //-------------FUNCTIONS FOR FIRING ENEMY BULLETS----------------//
                //------------------------------------------------------------------//

                int FEShotSpeed = 0;
                int FEShotSpeedR = 0;
                int fEnemyBulletCountR = 0;
               
                int fEnemyBulletCount = 0;
                int fEnemyBulletX[10000];
                int fEnemyBulletY[10000];
                bool isBulletActiveFE[10000];
                int fEnemyBulletRX[10000];
                int fEnemyBulletRY[10000];
                bool isBulletActiveFER[10000];

             
                print_maze();
                print_player(ref marioX,ref marioY);
                print_firingEnemy(firingEnemyX, firingEnemyY);

                while (gameRunning)
                {
                    Sleep(50);
                    if (GetAsyncKeyState(VK_LEFT))
                    {
                        left_movement();
                    }

                    if (GetAsyncKeyState(VK_RIGHT))
                    {
                        right_movement();
                    }

                    if (GetAsyncKeyState(VK_UP))
                    {
                        up_movement();
                    }
                    if (GetAsyncKeyState(VK_DOWN))
                    {

                        down_movement();
                    }

                    char nextLocation1 = getCharAtxy(marioX, marioY + 3);
                    char nextLocation2 = getCharAtxy(marioX + 1, marioY + 3);
                    char nextLocation3 = getCharAtxy(marioX + 2, marioY + 3);
                    if (nextLocation3 == ' ' && nextLocation1 == ' ' && nextLocation2 == ' ')
                    {
                        erase(ref marioX,ref marioY);
                        marioY = marioY + 1;
                        print_player(ref marioX,ref marioY);
                    }
                    if (GetAsyncKeyState(VK_SPACE))
                    {
                        generate_bullet();
                    }

                    if (GetAsyncKeyState(VK_ESCAPE))
                    {
                        gameRunning = false;
                    }

                    char next = getCharAtxy(marioX, marioY + 3);
                    char next1 = getCharAtxy(marioX + 1, marioY + 3);
                    if (next == ' ' && next1 == ' ')
                    {
                        erase(ref marioX,ref marioY);
                        marioY = marioY + 1;
                        print_player(ref marioX,ref marioY);
                    }
                    printScore(ref score, ref  marioHealth);
                    move_enemy();
                    generate_bulletFE();
                    collisionMario();
                    collisionFE();
                    collisionFire();
                    collisionDrum();
                    move_bulletFE();
                    generate_bulletFER();
                    move_bulletFER();
                    move_firingEnemy();
                    move_fire();
                    move_bullet();
                }
            }
        }
    }}

       static void print_maze()
        {
            Console.Clear();
            char [,] arr = 
                {{},
        { '@', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '@'},
        {},
        {},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        {},
        {},
        {},
        {},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        {},
        {},
        {},
        {},
        { '@', '#', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', '#', '@'},
        { '@', '#', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', '#', '@'},
        { '@', '#', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', '#', '@'},
        {},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        { '@', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '@'},
        {},
        {},
        {},
        {},
        { '@', '#', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', '#', '@'},
        { '@', '#', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', '|', '#', '@'},
        { '@', '#', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '|', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '|', '#', '@'},
        {},
        {},
        {},
        {},
        {},
        {},
    };

            for (int r = 0; r < 49; r++)
            {
                for (int c = 0; c < 120; c++)
                {
                    Console.WriteLine( arr[r,c]);
                }
                Console.WriteLine();
            }
        }



        //---------------------------------------------------------------------------------------------------//
        //-----------------------------------FUNCTIONS FOR PRINTING PLAYER-----------------------------------//
        //---------------------------------------------------------------------------------------------------//

       static void print_player( ref int[] marioX, ref int[] marioY)
        {
            {
                char face = 2;
                char pait = 219;
                char gun = 196;
                char tang = 227;
                char[] first_row = { face, ' ' };
                char[] sec_row = { pait, gun };
                char[] third_row = { tang, ' ' };
                for (int i = 0; i < 2; i++)
                {
                    Console.SetCursorPosition(marioX + i, marioY);
                    Console.WriteLine(first_row[i]);
                }
                Console.WriteLine();
                for (int i = 0; i < 2; i++)
                {
                    Console.SetCursorPosition(marioX + i, marioY + 1);
                    Console.WriteLine(sec_row[i]);
                }
                Console.WriteLine();
                for (int i = 0; i < 2; i++)
                {
                    Console.SetCursorPosition(marioX + i, marioY + 2);
                    Console.WriteLine(third_row[i]);
                }
                Console.WriteLine();
            }
        }
        static void erase(ref int[] marioX, ref int[] marioY)
        {
            for (int i = 0; i < 2; i++)
            {
                
                Console.SetCursorPosition(marioX + i, marioY);
                Console.WriteLine(' ');
            }
            Console.WriteLine();
            for (int i = 0; i < 2; i++)
            {

                Console.SetCursorPosition(marioX + i, marioY + 1);
                Console.WriteLine(' ');
            }
            Console.WriteLine();
            for (int i = 0; i < 2; i++)
            {

                Console.SetCursorPosition(marioX + i, marioY + 2);
                Console.WriteLine(' ');
            }
        }

        //---------------------------------------------------------------------------------------------------//
        //-----------------------------------FUNCTIONS FOR PLAYER BULLET-------------------------------------//
        //---------------------------------------------------------------------------------------------------//

        static void printBullet(int x, int y)
        {
            Console.SetCursorPosition(x, y);
            Console.WriteLine(".");
        }
       static void eraseBullet(int x, int y)
        {
            Console.SetCursorPosition(x, y);
            Console.WriteLine(" ");
        }
        static void makeBulletInactive(ref bool[] isBulletActive,int index)
        {
            isBulletActive[index] = false;
        }
        static void generate_bullet(ref bool[] isBulletActive,ref int bulletCount, ref int[] bulletX, ref int[] bulletY, ref int[] marioX, ref int[] marioY)
        {
            char next = getCharAtxy(marioX + 3, marioY + 1);
            if (next == ' ')
            {
                bulletX[bulletCount] = marioX + 3;
                bulletY[bulletCount] = marioY + 1;
                isBulletActive[bulletCount] = true;
                Console.SetCursorPosition(marioX + 3, marioY + 1);
                Console.WriteLine(".");
                bulletCount++;
            }
        }
        static void move_bullet(ref bool[] isBulletActive, ref int bulletCount,ref int[] bulletX, ref int[] bulletY)
        {
            for (int x = 0; x < bulletCount; x++)
            {
                char next = getCharAtxy(bulletX[x] + 1, bulletY[x]);
                if (next != ' ')
                {
                    eraseBullet(bulletX[x], bulletY[x]);
                    makeBulletInactive(ref isBulletActive, x);
                }
                else
                {
                    eraseBullet(bulletX[x], bulletY[x]);
                    bulletX[x] = bulletX[x] + 1;
                    printBullet(bulletX[x], bulletY[x]);
                }
            }
        }

        //---------------------------------------------------------------------------------------------------//
        //-----------------------------------FUNCTIONS FOR PLAYER MOVEMENT-----------------------------------//
        //---------------------------------------------------------------------------------------------------//

        static char getCharAtxy(short int x, short int y)
        {
            CHAR_INFO ci;
            COORD xy = { 0, 0 };
            SMALL_RECT rect = { x, y, x, y };
            COORD coordBufSize;
            coordBufSize.X = 1;
            coordBufSize.Y = 1;
            return ReadConsoleOutput(GetStdHandle(STD_OUTPUT_HANDLE), &ci, coordBufSize, xy, &rect) ? ci.Char.AsciiChar : ' ';
        }

        static void left_movement(ref int[] marioX, ref int[] marioY)
        {
            char nextLocation = getCharAtxy(marioX - 1, marioY);
            char nextLocation1 = getCharAtxy(marioX - 1, marioY + 1);
            char nextLocation2 = getCharAtxy(marioX - 1, marioY + 2);
            if (nextLocation == ' ' && nextLocation1 == ' ' && nextLocation2 == ' ')
            {
                erase(ref marioX,ref marioY);
                marioX = marioX - 1;
                print_player(ref marioX,ref marioY);
            }
        }

       static void right_movement(ref int[] marioX, ref int[] marioY)
        {
            char nextLocation = getCharAtxy(marioX + 2, marioY);
            char nextLocation1 = getCharAtxy(marioX + 2, marioY + 1);
            char nextLocation2 = getCharAtxy(marioX + 2, marioY + 2);
            if (nextLocation == ' ' && nextLocation1 == ' ' && nextLocation2 == ' ')
            {
                erase(ref marioX,ref marioY);
                marioX = marioX + 1;
                print_player(ref marioX,ref marioY);
            }
        }

       static void up_movement(ref int[] marioX, ref int[] marioY)
        {
            char nextLocation = getCharAtxy(marioX, marioY - 7);
            char nextLocation1 = getCharAtxy(marioX + 1, marioY - 7);
            char nextLocation2 = getCharAtxy(marioX, marioY - 6);
            char nextLocation3 = getCharAtxy(marioX + 1, marioY - 6);
            char nextLocation4 = getCharAtxy(marioX, marioY - 5);
            char nextLocation5 = getCharAtxy(marioX + 1, marioY - 5);
            char nextLocation6 = getCharAtxy(marioX, marioY + 3);
            char nextLocation7 = getCharAtxy(marioX + 1, marioY + 3);
            if (nextLocation == ' ' && nextLocation1 == ' ' && nextLocation2 == ' ' && nextLocation3 == ' ' && nextLocation4 == ' ' && nextLocation5 == ' ' && nextLocation6 != ' ' && nextLocation7 != ' ')
            {

                erase(ref marioX,ref marioY);
                marioY = marioY - 7;
                print_player(ref marioX,ref marioY);
            }
        }

       static void down_movement(ref int[] marioX, ref int[] marioY)
        {

            char next = getCharAtxy(marioX, marioY + 3);
            char next2 = getCharAtxy(marioX + 1, marioY + 3);
            char nextLocation = getCharAtxy(marioX, marioY + 7);
            char nextLocation1 = getCharAtxy(marioX + 1, marioY + 7);
            char nextLocation2 = getCharAtxy(marioX + 2, marioY + 7);
            if (next != ' ' && next2 != ' ' && next != '#' && next2 != '#')
            {
                if (nextLocation == ' ' && nextLocation1 == ' ' && nextLocation2 == ' ')
                {
                    erase(  ref  marioX, ref  marioY);
                    marioY = marioY + 7;
                    print_player(ref marioX,ref marioY);
                }
            }
        }


        //---------------------------------------------------------------------------------------------------//
        //-----------------------------------FUNCTIONS FOR DRUM ENEMY----------------------------------------//
        //---------------------------------------------------------------------------------------------------//

       static void print_drum(ref int[] drumX,ref int[] drumY)
        {
            
            char[] first_row = { ' ', ' ', ' ', '-', '-', '-', ' ' };
            char[] sec_row = { ' ', '-', '-', '-', '-', '-', '-', '-', ' ' };
            char[] third_row = { ' ', '-', '-', '-', '-', '-', '-', '-', ' ' };
            char[] four_row= { ' ', ' ', ' ', '-', '-', '-', ' ' };

            for (int i = 0; i < 7; i++)
            {
                Console.SetCursorPosition(drumX + i, drumY);
               Console.WriteLine( first_row[i] );
            }
            Console.WriteLine();
            for (int i = 0; i < 9; i++)
            {
                Console.SetCursorPosition(drumX + i, drumY + 1);
                Console.WriteLine( sec_row[i] );
            }
            Console.WriteLine();
            for (int i = 0; i < 9; i++)
            {
                Console.SetCursorPosition(drumX + i, drumY + 2);
                Console.WriteLine( third_row[i]);
            }
            Console.WriteLine();
            for (int i = 0; i < 7; i++)
            {
                Console.SetCursorPosition(drumX + i, drumY + 3);
                Console.WriteLine(four_row[i]);
            }
            Console.WriteLine();
        }

       static void erase_drum(ref int[] drumX, ref int[] drumY)
        {
            for (int i = 0; i < 7; i++)
            {
                Console.SetCursorPosition(drumX + i, drumY);
                Console.WriteLine(" ");
            }
            Console.WriteLine();
            for (int i = 0; i < 9; i++)
            {
              Console.SetCursorPosition(drumX + i, drumY + 1);
                Console.WriteLine(" ");
            }
            Console.WriteLine();
            for (int i = 0; i < 9; i++)
            {
            Console.SetCursorPosition(drumX + i, drumY + 2);
              Console.WriteLine(" ");
            }
            Console.WriteLine();
            for (int i = 0; i < 7; i++)
            {
               Console.SetCursorPosition(drumX + i, drumY + 3);
              Console.WriteLine(" ");
            }
            Console.WriteLine();
        }

        //---------------------------------------------------------------------------------------------------//
        //-----------------------------------FUNCTIONS FOR ENEMY DIRECTION-----------------------------------//
        //---------------------------------------------------------------------------------------------------//

       static void enemy_direction_left(ref string enemy_direction1, ref int[] drumX, ref int[] drumY)
        {
            char next_location1 = getCharAtxy(drumX - 1, drumY + 1);
            char next_location2 = getCharAtxy(drumX - 1, drumY + 2);
            char next_location3 = getCharAtxy(drumX - 1, drumY + 3);
            char next_location4 = getCharAtxy(drumX - 1, drumY);
            if (next_location1 == ' ' && next_location2 == ' ' && next_location3 == ' ' && next_location4 == ' ')
            {
                erase_drum(ref drumX, ref  drumY);
                drumX--;
                print_drum(ref  drumX, ref  drumY);
            }
            if (next_location1 == '#' || next_location2 == '#' || next_location3 == '#' || next_location4 == '#')
            {
                enemy_direction1 = "Right";
            }
        }
       static void enemy_direction_right(ref string enemy_direction1,ref int[] drumX, ref int[] drumY)
        {
            char next_location1 = getCharAtxy(drumX + 9, drumY + 1);
            char next_location2 = getCharAtxy(drumX + 9, drumY + 2);
            char next_location3 = getCharAtxy(drumX + 9, drumY + 3);
            char next_location4 = getCharAtxy(drumX + 9, drumY);
            if (next_location1 == ' ' && next_location2 == ' ' && next_location3 == ' ' && next_location4 == ' ')
            {
                erase_drum(ref  drumX, ref drumY);
                drumX++;
                print_drum(ref  drumX, ref  drumY);
            }
            if (next_location1 == '#' || next_location2 == '#' || next_location3 == '#' || next_location4 == '#')
            {
                enemy_direction1 = "Left";
            }
        }
       static void enemy_direction_against_gravity(ref int[] drumX, ref int[] drumY)
        {
            char next_location8 = getCharAtxy(drumX - 1, drumY + 4);

            char next_location1 = getCharAtxy(drumX, drumY + 4);
            char next_location2 = getCharAtxy(drumX + 1, drumY + 4);
            char next_location3 = getCharAtxy(drumX + 2, drumY + 4);
            char next_location4 = getCharAtxy(drumX + 3, drumY + 4);
            char next_location5 = getCharAtxy(drumX + 4, drumY + 4);
            char next_location6 = getCharAtxy(drumX + 5, drumY + 4);
            char next_location7 = getCharAtxy(drumX + 6, drumY + 4);
            char next_location9 = getCharAtxy(drumX + 7, drumY + 4);
            if (next_location9 == ' ' && next_location8 == ' ' && next_location1 == ' ' && next_location2 == ' ' && next_location3 == ' ' && next_location4 == ' ' && next_location5 == ' ' && next_location6 == ' ' && next_location7 == ' ')
            {
                erase_drum(ref  drumX, ref  drumY);
                drumY = drumY + 1;
                print_drum(ref  drumX, ref  drumY);
            }
        }

        //---------------------------------------------------------------------------------------------------//
        //-----------------------------------FUNCTIONS FOR ENEMY MOVEMENT------------------------------------//
        //---------------------------------------------------------------------------------------------------//

       static void move_enemy(ref string enemy_direction1, ref int[] drumX, ref int[] drumY)
        {

            print_drum(ref drumX, ref  drumY);

            if (enemy_direction1 == "Left")
            {
                enemy_direction_left(ref enemy_direction1, ref  drumX, ref drumY);
            }
            if (enemy_direction1 == "Right")
            {
                enemy_direction_right(ref enemy_direction1, ref drumX, ref drumY);
            }

            enemy_direction_against_gravity(ref drumX, ref  drumY);
        }

       static void collisionDrum(ref int bulletCount, ref int[] drumX, ref int[] drumY, ref int[] bulletX, ref int[] bulletY,bool[] isBulletActive,ref int score)
        {
            for (int x = 0; x < bulletCount; x++)
            {

                if (isBulletActive[x] == true)
                {
                    if (bulletX[x] + 1 == drumX && (bulletY[x] == drumY || bulletY[x] == drumY + 1 || bulletY[x] == drumY + 2 || bulletY[x] == drumY + 3))
                    {
                        score++;
                    }
                }
            }
        }


        //--------------------------------------------------------------------------------------------//
        //--------------------------FUNCTIONS TO PRINT SCORE -----------------------------------------//
        //-------------------------------------------------------------------------------------------//

       static void printScore(ref int score,ref int marioHealth)
        {
            Console.SetCursorPosition(125, 10);
            Console.WriteLine( "Score is: " + score);
            Console.SetCursorPosition(125, 11);
            Console.WriteLine("Mario Health is: " + marioHealth);
        }

        //--------------------------------------------------------------------------------------------//
        //--------------------------FUNCTIONS FOR COLLISION DETECTION --------------------------------//
        //-------------------------------------------------------------------------------------------//

       static void collision_with_fire(ref int[] fireX,ref int[] fireY,ref int[] marioX,ref int[] marioY,ref bool gameRunning,ref int marioHealth)
        {
            if (fireX - 1 == marioX + 2 && fireY == marioY)
            {
                if (marioHealth <= 0)
                {
                    gameRunning = false;
                }
                else
                {
                    marioHealth = marioHealth - 5;
                }
                //=================================

            }
            if (fireX + 5 == marioX - 1 && fireY == marioY)
            {
                if (marioHealth <= 0)
                {
                    gameRunning = false;
                }
                else
                {
                    marioHealth = marioHealth - 5;
                }
                //===============================
                cout << gameRunning << endl;
            }
            if (fireY - 1 == marioY + 3 && (fireX == marioX || fireX + 1 == marioX || fireX + 2 == marioX || fireX + 3 == marioX))
            {
                if (marioHealth <= 0)
                {
                    gameRunning = false;
                }
                else
                {
                    marioHealth = marioHealth - 5;
                }
                //==========================

            }
        }

       static void collision_with_drum(ref int[] drumX, ref int[] drumY, ref int[] marioX, ref int[] marioY, ref bool gameRunning, ref int marioHealth)
        {
            if (drumX + 9 == marioX - 1 && drumY + 1 == marioY)
            {
                if (marioHealth <= 0)
                {
                    gameRunning = false;
                }
                else
                {
                    marioHealth = marioHealth - 5;
                }
                //==========================

            }
            if (drumX - 1 == marioX + 2 && drumY + 1 == marioY)
            {
                if (marioHealth <= 0)
                {
                    gameRunning = false;
                }
                else
                {
                    marioHealth = marioHealth - 5;
                }
                //==========================
                cout << gameRunning << endl;
            }
            if (drumY - 1 == marioY + 3 && (drumX == marioX || drumX + 1 == marioX || drumX + 2 == marioX || drumX + 3 == marioX || drumX + 4 == marioX))
            {
                if (marioHealth <= 0)
                {
                    gameRunning = false;
                }
                else
                {
                    marioHealth = marioHealth - 5;
                }
                //==========================

            }
        }

      static  void collision_with_FE_Bullet(ref int fEnemyBulletCount, ref int[] isBulletActiveFE, ref int[] fEnemyBulletX, ref int[] fEnemyBulletY, ref int[] isBulletActiveFER, ref int[] fEnemyBulletRX, ref int[] fEnemyBulletRY, ref int marioX, ref int marioY, ref int marioHealth, ref bool gameRunning)
        {
            collision_with_FE_Bullet_left(ref fEnemyBulletCount, ref isBulletActiveFE, ref fEnemyBulletX, ref fEnemyBulletY, ref marioX, ref marioY, ref marioHealth, ref gameRunning);
            collision_with_FE_Bullet_right(ref fEnemyBulletCount, ref isBulletActiveFER, ref fEnemyBulletRX, ref fEnemyBulletRY, ref marioX, ref marioY, ref marioHealth, ref  gameRunning);
        }

       static void collision_with_FE_Bullet_left(ref int fEnemyBulletCount,ref int[] isBulletActiveFE,ref int[] fEnemyBulletX,ref int[] fEnemyBulletY,ref int marioX,ref int marioY,ref int marioHealth,ref bool gameRunning)
        {
            for (int x = 0; x < fEnemyBulletCount; x++)
            {
                if (isBulletActiveFE[x] == true)
                {
                    if (fEnemyBulletX[x] - 3 == marioX && (fEnemyBulletY[x] == marioY || fEnemyBulletY[x] == marioY + 1 || fEnemyBulletY[x] == marioY + 2))
                    {
                        if (marioHealth <= 0)
                        {
                            gameRunning = false;
                        }
                        else
                        {
                            marioHealth--;
                        }
                        //==========================

                    }
                }
            }
        }

       static void collision_with_FE_Bullet_right(ref int fEnemyBulletCount, ref int[] isBulletActiveFER, ref int[] fEnemyBulletRX, ref int[] fEnemyBulletRY, ref int marioX, ref int marioY, ref int marioHealth, ref bool gameRunning)
        {
            for (int x = 0; x < fEnemyBulletCount; x++)
            {
                if (isBulletActiveFER[x] == true)
                {
                    if (fEnemyBulletRX[x] + 1 == marioX && (fEnemyBulletRY[x] == marioY || fEnemyBulletRY[x] == marioY + 1 || fEnemyBulletRY[x] == marioY + 2))
                    {
                        if (marioHealth <= 0)
                        {
                            gameRunning = false;
                        }
                        else
                        {
                            marioHealth--;
                        }
                        //==========================

                    }
                }
            }
        }

       static void collisionMario(ref int[] drumX, ref int[] drumY, ref int[] fireX, ref int[] fireY, ref int[] marioX, ref int[] marioY, ref bool gameRunning, ref int marioHealth, ref int fEnemyBulletCount, ref int[] isBulletActiveFE, ref int[] fEnemyBulletX, ref int[] fEnemyBulletY, ref int[] isBulletActiveFER, ref int[] fEnemyBulletRX, ref int[] fEnemyBulletRY)
        {
            collision_with_fire(ref fireX, ref fireY, ref marioX, ref marioY, ref gameRunning, ref marioHealth);
            collision_with_drum(ref  drumX, ref drumY, ref marioX, ref marioY, ref gameRunning, ref marioHealth);
            collision_with_FE_Bullet(ref fEnemyBulletCount, ref isBulletActiveFE, ref  fEnemyBulletX, ref fEnemyBulletY, ref isBulletActiveFER, ref fEnemyBulletRX, ref fEnemyBulletRY, ref marioX, ref marioY, ref marioHealth, ref  gameRunning);
        }
    }
}
